# path: backend/services/evidence_service.py
from __future__ import annotations

import uuid
from datetime import datetime
from typing import Dict, List, Optional

class EvidenceService:
    """
    Normalizes facts and computes deltas to produce EvidenceChips.
    """
    @staticmethod
    def mint_id() -> str:
        return str(uuid.uuid4())

    @staticmethod
    def to_evidence_chips(facts: List[Dict]) -> List[Dict]:
        # Facts are dicts with: kind,name,value,time,source_id
        facts_sorted = sorted(facts, key=lambda f: f.get("time") or "")
        last_values = {}  # key by (kind,name)
        chips: List[Dict] = []
        for f in facts_sorted:
            key = (f.get("kind"), f.get("name"))
            val = f.get("value")
            delta = "↔"
            if key in last_values and val is not None:
                prev = last_values[key]
                try:
                    # numeric delta if possible
                    curf = float(str(val).split()[0])
                    prevf = float(str(prev).split()[0])
                    if curf > prevf:
                        delta = "+X"
                    elif curf < prevf:
                        delta = "−X"
                except Exception:
                    delta = "↔" if str(prev) == str(val) else "+X"
            last_values[key] = val
            chips.append({
                "id": EvidenceService.mint_id(),
                "kind": f.get("kind", "note"),
                "name": f.get("name", ""),
                "value": val if val is not None else "",
                "delta": delta,
                "time": f.get("time") or datetime.utcnow().isoformat(timespec="minutes"),
                "source_id": f.get("source_id") or f"{f.get('kind','obs')}/{EvidenceService.mint_id()}",
            })
        return chips
